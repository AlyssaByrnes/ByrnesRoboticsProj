//Car Info
//Desired Velocity of Ego Vehicle
#define v_d (6.000000)
#define w (10.000000)
#define m (2207.000000)
//Trajectory
#define s (16.173812)
#define kappa_0 (0.000000)
#define kappa_1 (0.215389)
#define kappa_2 (-0.215389)
#define kappa_3 (0.000000)

// SCENARIO PARAMETERS //

// Mathematical constants...
// Soonho can you add a feature for a floating point representation of pi, e, etc...?
#define pi 3.14159265359


// VEHICLE PARAMETERS //
// Constants

#define Iz 4423.0
#define Cf 108000.0
#define Cr 108000.0
#define lf 1.292
#define lr 1.515

// CONTROLLER PARAMETERS//
#define k1 2.0
#define k2 12.0
#define k3 4.0
#define k4 2.0
#define k5 1.0
#define k6 1.515 // 10

// Helpers to clean up equations...
#define cl (Cr*lr-Cf*lf)

// TRACKING CONTROLLER INPUTS //
// Rate of change of front wheel angle
#define vw k1*(cos(Psi_d)*(sy_d - sy) - sin(Psi_d)*(sx_d - sx)) +k2*(Psi_d - Psi) +k3*(Psi_dot_d - Psi_dot) -k4*(delta)

// Longitudinal acceleration
#define ax  k5*(cos(Psi_d)*(sx_d - sx) + sin(Psi_d)*(sy_d - sy)) +k6*(v_d-v)

// PURE PURSUIT ALGORITHM //
#define l sqrt((waypointx - sx)*(waypointx - sx) + (waypointy - sy)*(waypointy - sy))
#define r l*l/(2*(waypointx - sx))
#define kappa_d (1.00/r)

// BOUNDS ON VARIABLES //
[0,100] tau;
[-2,2.03] Beta;
[-2,2.04] Psi;
[-2,2.05] Psi_dot;
[10.8,11.1] v; // 6,12
[120,130] sx; // 100
[0,10] sy; // 100
[-2, 2.04] delta;
[0, 3.1] time;
[-2,2.06] kappa_d;
[-2,2.07] Psi_d;
[0,100] sx_d;
[0,100] sy_d;
[-2,2.08] Psi_dot_d;
[0, 51] sx_env;
[-20,20] waypointx;
[-20,20] waypointy;

// DEFINE MEASUREMENT NOISE //
//[-0.05,0.05] beta_noise [2.0];
//[-1,1] psi_dot_noise [2.0];
//[-1,1] v_noise [2.0];
//[-1,1] sx_noise [2.0];
//[-1,1] sy_noise [2.0];
//[-1,1] delta_noise [2.0];

// NON DETERMINISM FOR ENVIRONMENT //
//[-1,1] ax_env_nondet [2.0];
//[-1,1] ay_env_nondet [2.0];

// HYBRID AUTOMATON//
{
    // Lane change motion primitive
    mode 1;

    invt:

    // Velocity must be greater than or equal to 0
    (v>=0);

    flow:

    // TARGET VEHICLE //
    // Plant equations
    // Time
    d/dt[tau]=1;
    // Compute rate of change of the slip angle
    d/dt[Beta]=((cl/(m*v*v))-1.0)*Psi_dot + Cf*delta/(m*v) - (Cf+Cr)*Beta/(m*v); //+ beta_noise;
    // Rate of change of the heading angle is equal to yaw rate
    d/dt[Psi]=Psi_dot;
    // Rate of change of yaw rate
    d/dt[Psi_dot]=(cl*Beta/Iz) - ((lf*lf*Cf+lr*lr*Cr)/Iz)*(Psi_dot/v) + (lf*Cf)*delta/Iz ;//+ psi_dot_noise;
    // Longitudinal acceleration
    d/dt[v]=ax ;//+ v_noise;
    // X component of velocity
    d/dt[sx]=v*cos(Beta+Psi); //+ sx_noise;
    // Y component of velocity
    d/dt[sy]=v*sin(Beta+Psi); //+ sy_noise;
    // Rate of change of front wheel angle.
    d/dt[delta]=vw; //+ delta_noise;

    //Trajectory and Tracking Equations//
    d/dt[kappa_d] = 0;
    d/dt[Psi_d] = (pi/4.00) - (v_d*tau/(2*pi*r));
    d/dt[sx_d] = v_d*cos(Psi_d);
    d/dt[sy_d] = v_d*sin(Psi_d);
    d/dt[Psi_dot_d] = -(v/(2*r));

    d/dt[waypointx]= 0;
    d/dt[waypointy]= 0;

    
    // Other Vehicle 
    //d/dt[sx_env]= vx_env_dot;
    //d/dt[vx_env]= ax_env_nondet;
    //d/dt[sy_env]= vy_env_dot;
    //d/dt[vy_env]= ay_env_nondet;

    jump:

}

//init: 
//@1 (and (sx>=0) (sx<=0.5) (sy>=0) (sy<=0.05) (v>=10.9) (v=11.1) (sx_d=0) (sy_d=0) 
  //  (Psi>=0) (Psi<=0.1) (Psi_dot=0) (Beta=0) (delta=0) (tau=0) 
    //(Psi_d=0) (Psi_dot_d=0)
    //(sx_env=15) (kappa_d=0) (waypointx=15) (waypointy=5));
//init:
//@1 (and (sx=0) (sy=0) (v=4.5) (sx_d=0) (sy_d=0)
 //   (Psi=0) (Psi_dot=0) (Beta=0) (delta=0) (tau=0)
  //  (Psi_d=0) (Psi_dot_d=0) (sx_env=15)(kappa_d=0.01) (waypointx=15) (waypointy=5));


//goal:
//@1 (tau=1);
//@1 (or (and (sy<w) (tau>2) (tau<3)) (and (sy<w) (sx>sx_env)));
//@1 (and (sy>w) (sx>sx_env));
//@1 (and (sy<w) (sx>sx_env));
//@1 ((and (sy<w) (tau=3) ));
init:
@1 (and (sx=(0.000000)) (sy=(0.000000)) (v=(4.000000)) (sx_d=0) (sy_d=0) (Psi=0) (Psi_dot=0) (Beta=0) (delta=0) (tau=0)(Psi_d=0) (Psi_dot_d=0) (sx_env=15) (kappa_d=0.01) (waypointx=15) (waypointy=5));
goal:
@1 (and (sy<w) (sx>sx_env));
